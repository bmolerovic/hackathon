{
	"name": "nb_import_actors",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spworking",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "51d658e6-6ba1-4e79-af80-f21db5a2765a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e8df41ef-dc98-4e75-802c-d0f7bc1433b7/resourceGroups/mdw-oh-01-eastus/providers/Microsoft.Synapse/workspaces/asateam1/bigDataPools/spworking",
				"name": "spworking",
				"type": "Spark",
				"endpoint": "https://asateam1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spworking",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"import uuid\r\n",
					"from pyspark.sql.types import *\r\n",
					"account_name = \"sadlteam1gen2\"\r\n",
					"container_name = \"silver\"\r\n",
					"relative_path = \"/Catalog.parquet\"\r\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\r\n",
					"\r\n",
					"df1 = spark.read.parquet(adls_path )\r\n",
					"df1.show(5)\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import lit\r\n",
					"catalog = df1\r\n",
					"catalog1=catalog.withColumn('ActorsSK', catalog['ActorID'])\r\n",
					"catalog2=catalog1.withColumn('Gender',lit('F/M'))\r\n",
					"\r\n",
					"DimActors = catalog2.select([c for c in catalog2.columns if c in ['ActorsSK', 'ActorID', 'Actor', 'Gender']])\r\n",
					"#actors.show(5)\r\n",
					"\r\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"import pyspark.sql\r\n",
					"destination = \"abfss://gold@sadlteam1gen2.dfs.core.windows.net/\"\r\n",
					"#temp = spark.sql(\"select DISTINCT MovieTitle, MovieID as MovieSK from temp_Catalog\")\r\n",
					"DimActors.write.format('parquet').mode('overwrite').save(destination + '/DimActors')\r\n",
					""
				],
				"execution_count": 24
			}
		]
	}
}