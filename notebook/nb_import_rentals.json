{
	"name": "nb_import_rentals",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spnikolamatic",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b54ddfef-5aa0-4061-8ded-bd70217ba44d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e8df41ef-dc98-4e75-802c-d0f7bc1433b7/resourceGroups/mdw-oh-01-eastus/providers/Microsoft.Synapse/workspaces/asateam1/bigDataPools/spnikolamatic",
				"name": "spnikolamatic",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				}
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"import uuid\r\n",
					"from pyspark.sql.types import *\r\n",
					"account_name = \"sadlteam1gen2\"\r\n",
					"container_name = \"silver\"\r\n",
					"relative_path = \"/Rentals.parquet\"\r\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\r\n",
					"df1 = spark.read.parquet(adls_path )\r\n",
					"df1.show(5)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"import uuid\r\n",
					"from pyspark.sql.types import *\r\n",
					"account_name = \"sadlteam1gen2\"\r\n",
					"container_name = \"silver\"\r\n",
					"relative_path = \"/Customer.parquet\"\r\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\r\n",
					"df2 = spark.read.parquet(adls_path )\r\n",
					"df2.show(5)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"import pyspark.sql\r\n",
					"rentals = df1\r\n",
					"rentals1 = rentals.withColumn('RentalSK', monotonically_increasing_id())\r\n",
					"rentals2 = rentals1.withColumn('TranscationID' rentals1['TranscationID'])\r\n",
					"rentals3 = rentals2.withColumn('CustomerSK', rentals2['CustomerID'])\r\n",
					"rentals4 = rentals3.withColumn('MovieSK', rentals4['MovieID'])\r\n",
					"rentals5 = rentals4.withColumn('RentalDateSK', rentals5['RentalDate'])\r\n",
					"rentals6 = rentals5.withColumn('ReturnDateSK', rentals6['ReturnDate'])\r\n",
					"rentals7 = rentals6.withColumn('RentalDuration', )\r\n",
					"rentals8 = rentals7.withColumn('RentalCost', rentals8['RentalCost'])\r\n",
					"rentals9 = rentals8.withColumn('LateFee', rentals9['LateFee'])\r\n",
					"rentals10 = rentals9.withColumn('TotalCost', )\r\n",
					"rentals11 = rentals10.withColumn('RewindFlag', rentals11['RewindFlag'])"
				],
				"execution_count": null
			}
		]
	}
}